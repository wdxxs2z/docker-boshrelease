#!/usr/bin/env bash

#
# Swarm Manager properties
#

# Directory to store the Swarm Manager configuration files
export SWARM_MANAGER_CONF_DIR=${JOB_DIR}/config

# Directory to store the Swarm Manager logs
export SWARM_MANAGER_LOG_DIR=${LOG_DIR}

# Directory to store the Swarm Manager process IDs
export SWARM_MANAGER_PID_DIR=${RUN_DIR}

# Directory to store the Swarm Manager data files
export SWARM_MANAGER_STORE_DIR=${STORE_DIR}

# Directory to store the Swarm Manager temp files
export SWARM_MANAGER_TMP_DIR=${TMP_DIR}

# Enable debug mode
export SWARM_MANAGER_DEBUG="--debug=<%= p('swarm_manager.debug') %>"

# Log level
export SWARM_MANAGER_LOG_LEVEL="--log-level=<%= p('swarm_manager.log_level') %>"

# IP:Port to listen on
export SWARM_MANAGER_HOST="--host=<%= p('swarm_manager.listen_address') %>:<%= p('swarm_manager.port') %>"

# Placement strategy to use
export SWARM_MANAGER_STRATEGY="--strategy=<%= p('swarm_manager.strategy') %>"

# Filters to use
export SWARM_MANAGER_FILTERS="<%= p('swarm_manager.filters', []).map { |filter| "--filter=#{filter}" }.join(' ') %>"

# Enable Swarm manager replication
export SWARM_MANAGER_REPLICATION="--replication=<%= p('swarm_manager.replication') %>"

# Leader lock release time on failure
export SWARM_MANAGER_REPLICATION_TTL="--replication-ttl=<%= p('swarm_manager.replication_ttl') %>"

<%
def openstruct_to_hash(os)
  os.marshal_dump.map do |key, element|
    element.is_a?(OpenStruct) ? { key => openstruct_to_hash(element) } : { key => element }
  end.reduce(&:merge)
end

networks = openstruct_to_hash(spec.networks)
default_ip = networks.values.find { |net| net.has_key?(:default) }[:ip]
%>
# Address of the Swarm Manager joining the cluster
export SWARM_MANAGER_ADVERTISE="--advertise=<%= "#{p('swarm_manager.advertise', default_ip)}:#{p('swarm_manager.port')}" %>"

# Time in second between each heartbeat
export SWARM_MANAGER_HEARTBEAT="--heartbeat=<%= p('swarm_manager.heartbeat') %>"

# Enable CORS headers in the remote API
export SWARM_MANAGER_API_ENABLE_CORS="--api-enable-cors=<%= p('swarm_manager.api_enable_cors') %>"

# Overcommit to apply on resources
export SWARM_MANAGER_OVERCOMMIT="--cluster-opt=swarm.overcommit=<%= p('swarm_manager.overcommit') %>"

# Use TLS
export SWARM_MANAGER_TLS="--tls=<%= p('docker.tls') %>"

<% if_p('docker.tls_cacert') do |tls_cacert| %>
# Trust only remotes providing a certificate signed by the CA given here
export SWARM_MANAGER_TLS_CACERT="--tlscacert=${SWARM_MANAGER_CONF_DIR}/docker.cacert"
<% end %>

<% if_p('docker.tls_cert') do |tls_cert| %>
# Path to TLS certificate file
export SWARM_MANAGER_TLS_CERT="--tlscert=${SWARM_MANAGER_CONF_DIR}/docker.cert"
<% end %>

<% if_p('docker.tls_key') do |tls_key| %>
# Path to TLS key file
export SWARM_MANAGER_TLS_KEY="--tlskey=${SWARM_MANAGER_CONF_DIR}/docker.key"
<% end %>

<% if p('docker.tls_verify', false) %>
# Use TLS and verify the remote
export SWARM_MANAGER_TLS_VERIFY="--tlsverify=true"
<% end %>

<% if_p('swarm.discovery_options') do |discovery_options| %>
# Swarm discovery options
export SWARM_MANAGER_DISCOVERY_OPTIONS="<%= discovery_options.map { |discovery_option| "--discovery-opt=#{discovery_option}" }.join(' ') %>"
<% end %>

# Swarm discovery
export SWARM_MANAGER_DISCOVERY="<%= p('swarm.discovery_type') %>://<%= p('swarm.discovery_ips').map { |url| "#{url}:#{p('swarm.discovery_port')}" }.join(',') %><%= p('swarm.discovery_path') %>"

# Proxy configuration
<% if_p('env.http_proxy') do |http_proxy| %>
export HTTP_PROXY="<%= http_proxy %>"
export http_proxy="<%= http_proxy %>"
<% end %>
<% if_p('env.https_proxy') do |https_proxy| %>
export HTTPS_PROXY="<%= https_proxy %>"
export https_proxy="<%= https_proxy %>"
<% end %>
<% if_p('env.no_proxy') do |no_proxy| %>
export NO_PROXY="<%= no_proxy %>"
export no_proxy="<%= no_proxy %>"
<% end %>
