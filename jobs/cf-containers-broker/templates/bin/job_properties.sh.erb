#!/usr/bin/env bash

#
# CF-Containers-Broker properties
#

# Directory to store the CF-Containers-Broker configuration files
export CF_CONTAINERS_BROKER_CONF_DIR=$JOB_DIR/config

# Directory to store the CF-Containers-Broker logs
export CF_CONTAINERS_BROKER_LOG_DIR=$LOG_DIR

# Directory to store the CF-Containers-Broker process IDs
export CF_CONTAINERS_BROKER_PID_DIR=$RUN_DIR

# Directory to store the CF-Containers-Broker data files
export CF_CONTAINERS_BROKER_STORE_DIR=$STORE_DIR

# Directory to store the CF-Containers-Broker temp files
export CF_CONTAINERS_BROKER_TMP_DIR=$TMP_DIR

# Fetch new/updated container images on restart
export CF_CONTAINERS_FETCH_IMAGES=<%= p('broker.fetch_images') ? 'true' : '' %>

# Fetch offine container images
export CF_CONTAINERS_OFFINE_IMAGES=<%= p('broker.offine_images') ? 'true' : '' %>

# Restart containers with latest image/config on restart
export CF_CONTAINERS_UPDATE_CONTAINERS=<%= p('broker.update_containers') ? 'true' : '' %>

# CF-Containers-Broker Gemfile
export BUNDLE_GEMFILE=/var/vcap/packages/cf-containers-broker/Gemfile

# CF-Containers-Broker Rails environment
export RAILS_ENV=production

# CF-Containers-Broker settings file
export SETTINGS_PATH=$CF_CONTAINERS_BROKER_CONF_DIR/settings.yml

# Docker UNIX socket
export DOCKER_URL="<%= p('broker.docker_url') %>"

#
# Route Registrar properties
#

# Directory to store the Route Registrar configuration files
export ROUTE_REGISTRAR_CONF_DIR=${JOB_DIR}/config

# Directory to store the Route Registrar log files
export ROUTE_REGISTRAR_LOG_DIR=${LOG_DIR}

# Directory to store the Route Registrar process IDs
export ROUTE_REGISTRAR_PID_DIR=${RUN_DIR}

# Directory to store the Route Registrar data files
export ROUTE_REGISTRAR_STORE_DIR=${STORE_DIR}

# Directory to store the Route Registrar temp files
export ROUTE_REGISTRAR_TMP_DIR=${TMP_DIR}

# Proxy configuration
<% if_p('env.http_proxy') do |http_proxy| %>
export HTTP_PROXY="<%= http_proxy %>"
export http_proxy="<%= http_proxy %>"
<% end %>
<% if_p('env.https_proxy') do |https_proxy| %>
export HTTPS_PROXY="<%= https_proxy %>"
export https_proxy="<%= https_proxy %>"
<% end %>
<% if_p('env.no_proxy') do |no_proxy| %>
export NO_PROXY="<%= no_proxy %>"
export no_proxy="<%= no_proxy %>"
<% end %>
